use legacy_directx_x::*;

#[pub]
file -> DXNode
  = [^\r\n]* sep* nodes:node+ sep* {
    DXNode::Obj {
      name: "Root".to_string(),
      arg: None,
      children: nodes
    }
  }

node -> DXNode
  = obj / qualifier / oneline_values / multiline_values

obj -> DXNode
  = sep* name:identifier sep* arg:identifier? sep* "{" sep*
      nodes:node+
    "}" sep* {
    DXNode::Obj {
      name: name,
      arg: arg,
      children: nodes
    }
  }

qualifier -> DXNode
    = sep* "{" sep* name:identifier sep* "}" sep* {
      DXNode::Qualifier(name)
    }

oneline_values -> DXNode
  = num:number sep* ";" newline+ sep* {
    DXNode::Value(num)
  }

multiline_values -> DXNode
  = vals:singleline_values ++ ("," newline+) space* ";" newline+ sep* {
    DXNode::Values(vals)
  }

singleline_values -> Vec<Vec<f32>>
  = space* vals:singleline_values_2+ space* {
    vals
  }

singleline_values_2 -> Vec<f32>
  = space* nums:number_with_space ** "," space* ";" !newline space* {
    nums
  }

vals_sep = space* [;,] space*

number_with_space -> f32
  = space* num:number space* {
    num
  }

number -> f32
  = [-]?[0-9]+([.][0-9]+)? { match_str.parse().unwrap() }

identifier -> String
  = [a-zA-Z_][a-zA-Z_0-9]* { match_str.to_string() }

newline = [\r\n]
space = [ \t]
sep = [ \t\r\n]
